// this file contains a test harness that was auto-generated by fastify-openapi-glue
// running the tests directly after generation will probably fail as the parameters
// need to be manually added.

const t = require("tap");
const test = t.test;
const Fastify = require("fastify");
const fastifyPlugin = require("../index.js");

const specification = "../openApi.json";
const service = require("../service.js");

const opts = {
  specification,
  service
};

// Operation: listProjects
// URL: /projects/time_tracking
// summary:  fetches projects for timetracking
// req.query
//   type: object
//   properties:
//     order_by:
//       type: string
//       default: created_at DESC
//       description: order of the returned projects.
//     template:
//       type: string
//       default: index_search
//       description: template to return only desired data.
//     user_id:
//       type: integer
//       description: id of a user, returns only projects a given user is a member of.
//     valid_on_date:
//       type: string
//       format: date
//       description: >-
//         date without time - only projects will be returned that are active on a
//         given date. For our purpose this should be the current date
//   required:
//     - order_by
//     - template
//     - user_id
//     - valid_on_date
//
// valid responses
//   '200':
//     description: returns a list of projects
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: array
//               items:
//                 type: object
//                 properties:
//                   id:
//                     type: integer
//                     example: 1
//                   root_company_id:
//                     type: integer
//                     description: root company the project is related to
//                     example: 1
//                   name:
//                     type: string
//                     example: Project A
//

test("testing listProjects", (t) => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: "GET",
      url: "/projects/time_tracking",
      payload: undefined,
      headers: undefined
    },
    (err, res) => {
      t.error(err);
      t.equal(res.statusCode, 200);
    }
  );
});

// Operation: workinghoursByUserId
// URL: /workinghour_logs/users/:userId/workinghours
// summary:  fetches logged workinghour of a given user
// req.params
//   type: object
//   properties:
//     userId:
//       type: integer
//       description: id of user for whom to track time
//   required:
//     - userId
//
// valid responses
//   '200':
//     description: >-
//       returns logged workinghours of  given user as well as information if the
//       timetracking is locked
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             locked_time_tracking:
//               type: boolean
//               description: timetracking is locked and therefore no workinghours can be logged
//               default: false
//             data:
//               type: array
//               items:
//                 type: object
//                 properties:
//                   start_date:
//                     type: string
//                     format: date-time
//                     example: '2022-04-13T19:51:07Z'
//                   end_date:
//                     type: string
//                     format: date-time
//                     example: '2022-04-13T22:30:03Z'
//                   project_name:
//                     type: string
//                     example: Project A
//                   action:
//                     type: string
//                     description: >-
//                       type of tracked time. 'work' for worktime, 'pause' for
//                       breaks
//                     enum:
//                       - work
//                       - pause
//                   log_type:
//                     type: string
//                     description: >-
//                       type of log action as string, occurs when receiving
//                       workinghour data from the server. 'log' when the
//                       timetracking is started, 'entry' once the timetracking
//                       stopped
//                     enum:
//                       - log
//                       - entry
//

test("testing workinghoursByUserId", (t) => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: "GET",
      url: "/workinghour_logs/users/:userId/workinghours",
      payload: undefined,
      headers: undefined
    },
    (err, res) => {
      t.error(err);
      t.equal(res.statusCode, 200);
    }
  );
});

// Operation: startTimetracking
// URL: /workinghour_logs/users/:userId/workinghours
// summary:  start timetracking
// req.params
//   type: object
//   properties:
//     userId:
//       type: integer
//       description: id of user for whom to track time
//   required:
//     - userId
//
// req.body
//   required:
//     - log_type
//     - start_date
//     - user_id
//     - workinghour_period
//   type: object
//   properties:
//     start_date:
//       type: string
//       description: the time the logging was started
//       format: date-time
//     workinghour_period:
//       type: integer
//       description: >-
//         use when sending workinghour data to the server. use 0 for anything
//         timetracking related
//       enum:
//         - 0
//     log_type:
//       type: integer
//       description: >-
//         type of log action as number, use when sending workinghour data to the
//         server. 1 when the timetracking ist started, 0 once the timetracking
//         stopped
//       enum:
//         - 1
//         - 0
//     user_id:
//       type: integer
//       description: id of the user that the workinghours are logged for
//       example: 1
//     project_id:
//       type: integer
//       description: id of the project that the workinghours are logged for
//       example: 1
//
// valid responses
//   '201':
//     description: ''
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             comment:
//               type: string
//             created_at:
//               type: string
//               format: date-time
//               example: '2022-04-29T17:21:06.417Z'
//             end_date:
//               type: string
//               format: date-time
//               example: '2022-04-29T19:22:00Z'
//             id:
//               type: integer
//               example: 1
//             internal_creation:
//               description: >-
//                 describes how the workinghour was created. will be always 'true'
//                 in our use case
//               type: boolean
//               example: true
//             log_type:
//               type: string
//               description: >-
//                 type of log action as string, occurs when receiving workinghour
//                 data from the server. 'log' when the timetracking is started,
//                 'entry' once the timetracking stopped
//               enum:
//                 - log
//                 - entry
//             project_id:
//               type: integer
//               example: 1
//             resource_url:
//               type: string
//             start_date:
//               type: string
//               format: date-time
//               example: '2022-04-29T19:21:00Z'
//             tenant_id:
//               type: integer
//               example: 1
//             updated_at:
//               type: string
//               format: date-time
//               example: '2022-04-29T17:23:33.792Z'
//             user_id:
//               type: integer
//               example: 1
//             workinghour_period:
//               type: string
//               description: >-
//                 occurs when receiving workinghour data from the server. is 'daily'
//                 for anything timetracking related
//               enum:
//                 - daily
//             workinghours:
//               type: number
//               description: tracked time in hours. Initially 0
//               example: 0.016666666666666666
//             workinghours_saldo_id:
//               type: integer
//               example: 29
//

test("testing startTimetracking", (t) => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: "POST",
      url: "/workinghour_logs/users/:userId/workinghours",
      payload: undefined, //insert body data here!!
      headers: undefined
    },
    (err, res) => {
      t.error(err);
      t.equal(res.statusCode, 201);
    }
  );
});

// Operation: stopTimetracking
// URL: /workinghour_logs/users/:userId/workinghours/:workinghourId
// summary:  stop timetracking
// req.params
//   type: object
//   properties:
//     userId:
//       type: integer
//       description: id of user for whom the time is tracked
//     workinghourId:
//       type: integer
//       description: id of workinghour that will be updated
//   required:
//     - userId
//     - workinghourId
//
// req.body
//   required:
//     - action
//     - additional_params
//     - end_date
//     - log_type
//   type: object
//   properties:
//     end_date:
//       type: string
//       description: the time the logging was started
//       format: date-time
//     action:
//       type: string
//       description: 'type of tracked time. ''work'' for worktime, ''pause'' for breaks '
//       enum:
//         - work
//         - pause
//     log_type:
//       type: integer
//       description: >-
//         type of log action as number, use when sending workinghour data to the
//         server. 1 when the timetracking ist started, 0 once the timetracking
//         stopped
//       enum:
//         - 1
//         - 0
//     additional_params:
//       required:
//         - send_notification
//         - start_calculation
//       type: object
//       properties:
//         start_calculation:
//           type: boolean
//           description: calculate the logged time
//           example: true
//         send_notification:
//           type: boolean
//           description: notify responsible users that workinghours were logged
//           example: true
//       description: additional options for triggering serverside actions
//
// valid responses
//   '200':
//     description: ''
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             comment:
//               type: string
//             created_at:
//               type: string
//               format: date-time
//               example: '2022-04-29T17:21:06.417Z'
//             end_date:
//               type: string
//               format: date-time
//               example: '2022-04-29T19:22:00Z'
//             id:
//               type: integer
//               example: 1
//             internal_creation:
//               description: >-
//                 describes how the workinghour was created. will be always 'true'
//                 in our use case
//               type: boolean
//               example: true
//             log_type:
//               type: string
//               description: >-
//                 type of log action as string, occurs when receiving workinghour
//                 data from the server. 'log' when the timetracking is started,
//                 'entry' once the timetracking stopped
//               enum:
//                 - log
//                 - entry
//             project_id:
//               type: integer
//               example: 1
//             resource_url:
//               type: string
//             start_date:
//               type: string
//               format: date-time
//               example: '2022-04-29T19:21:00Z'
//             tenant_id:
//               type: integer
//               example: 1
//             updated_at:
//               type: string
//               format: date-time
//               example: '2022-04-29T17:23:33.792Z'
//             user_id:
//               type: integer
//               example: 1
//             workinghour_period:
//               type: string
//               description: >-
//                 occurs when receiving workinghour data from the server. is 'daily'
//                 for anything timetracking related
//               enum:
//                 - daily
//             workinghours:
//               type: number
//               description: tracked time in hours. Initially 0
//               example: 0.016666666666666666
//             workinghours_saldo_id:
//               type: integer
//               example: 29
//

test("testing stopTimetracking", (t) => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: "PUT",
      url: "/workinghour_logs/users/:userId/workinghours/:workinghourId",
      payload: undefined, //insert body data here!!
      headers: undefined
    },
    (err, res) => {
      t.error(err);
      t.equal(res.statusCode, 200);
    }
  );
});
